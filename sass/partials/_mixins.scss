@function multi-selector-whole-grid($classes, $counter) {
  $test: "";
  @each $class in $classes {
    @for $i from 1 through $column_count {
      $test: #{$test}#{".ba-col-"}#{$class}#{"-"}#{$i}#{","};
    }
  }
  @return $test
}

@function multi-selector-container($classes, $middle, $counter) {
  $test: "";
  @each $class in $classes {
    @for $i from 1 through $column_count {
      $test: #{$test}#{"."}#{$middle}#{"-"}#{$class}#{"-"}#{$i}#{","};
    }
  }
  @return $test
}

@function multi-selector-specific-grid($classes, $index) {
  $test: "";
  @each $class in $classes {
    $test: #{$test}#{".ba-col-"}#{$class}#{"-"}#{$index}#{","};
  }
  @return $test
}

@mixin opacityBlue($heavines) {
  background-color: rgba(25, 63, 77, $heavines);
}

@mixin pre-define-col($class, $column_count) {
  @for $i from 1 through $column_count {
    .ba-col-#{$class}-#{$i} {
      float: left;
      position: relative;
      min-height: 1px;
      padding-left: 15px;
      padding-right: 15px;
    }
  }
}

@mixin set-width-to-100($classes, $column_count) {
  #{multi-selector-whole-grid($classes, $column_count)} {
    width: 100%;
  }
}

@mixin set-width-to-variable($class, $column_count) {
  @for $i from 1 through $column_count {
    $width: percentage(($column_count - ($column_count - (($column_count + 1) - $i)))/$column_count);
    #{".ba-col-"}#{$class}#{"-"}#{(($column_count + 1) - $i)} {
      width: $width;
    }
  }
}

@mixin dynamic-set($class, $column_count) {
  @for $i from 1 through $column_count {
    $width: percentage(($column_count - ($column_count - $i))/$column_count);
    #{$class}#{$i} {
      -webkit-box-flex: 0;
      -webkit-flex: 0 0 $width;
      -moz-box-flex: 0;
      -moz-flex: 0 0 $width;
      -ms-flex: 0 0 $width;
      flex: 0 0 $width;
      max-width: $width;
    }
  }
}

@mixin dynamic-set-offset($class, $column_count) {
  @for $i from 1 through $column_count {
    $ml: percentage(($column_count - ($column_count - $i))/$column_count);
    #{$class}#{$i} {
      margin-left: $ml;
    }
  }
}

@mixin dynamic-container($class, $column_count) {
  @for $i from 1 through $column_count {
    $ml: percentage(($column_count - ($column_count - $i))/$column_count);
    #{$class}#{"-"}#{$i} {
      width: $ml;
    }
  }
}

@mixin dynamic-container-preset($classes, $middle, $column_count) {
  #{multi-selector-container($classes,$middle,$column_count)} {
    padding-right: 15px;
    padding-left: 15px;
    margin-right: auto;
    margin-left: auto;
  }
}

@mixin test($classes, $column_count) {
  #{multi-selector-whole-grid($classes,$column_count)} {
    float: left;
    position: relative;
    min-height: 1px;
    padding-left: 15px;
    padding-right: 15px;
    width: 100%;
  }
}

@mixin only($val, $units) {
  @for $i from 1 through length($val) {
    $temp1: nth( $val, $i);
    @media(max-width: $temp1) {
      @for $e from 1 through length($units) {
        $temp2: nth( $units, $e);
        #{".ba-only-"}#{$temp2} {
          @if $e==$i {
            display: block;
          }
          @else {
            display: none;
          }
        }
      }
    }
  }
}

@mixin only-over($val, $units) {
  @for $i from 1 through length($val) {
    $temp1: nth( $val, $i);
    @media(max-width: $temp1) {
      @for $e from 1 through length($units) {
        $temp2: nth( $units, $e);
        #{".ba-only-over-"}#{$temp2} {
          @if $e > $i {
            display: block;
          }
          @else {
            display: none;
          }
        }
      }
    }
  }
}

@mixin only-under($val, $units) {
  @for $i from 1 through length($val) {
    $temp1: nth( $val, $i);
    @media(max-width: $temp1) {
      @for $e from 1 through length($units) {
        $temp2: nth( $units, $e);
        #{".ba-only-under-"}#{$temp2} {
          @if $e <=$i {
            display: block;
          }
          @else {
            display: none;
          }
        }
      }
    }
  }
}
